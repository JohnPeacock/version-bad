#! /usr/local/perl -w
use Module::Build;
my $build = Module::Build->current;
my $subclass = $build->module_name();
my $version = $build->dist_version();

my $outputfile = shift();

open my $OUT, '>', $outputfile;

while (<DATA>) {
    s/__SUBCLASS__/$subclass/g;
    s/__VERSION__/$version/g;
    print {$OUT} $_;
}
close $OUT;

__DATA__
#! /usr/local/perl -w
# Before `make install' is performed this script should be runnable with
# `make test'. After `make install' it should work as `perl test.pl'

#########################

use Test::More tests => 200;
require "t/coretests.pm";

diag "Tests with base class" unless $ENV{PERL_CORE};

BEGIN {
    use_ok("__SUBCLASS__", __VERSION__); # If we made it this far, we are ok.
}

BaseTests("__SUBCLASS__");

diag "Tests with empty derived class" unless $ENV{PERL_CORE};

package version::Empty;
use vars qw($VERSION @ISA);
use __SUBCLASS__;
@ISA = qw(__SUBCLASS__);
$VERSION = 0.01;

package version::Bad;
use base __SUBCLASS__;
sub new { my($self,$n)=@_;  bless \$n, $self }

package main;
my $testobj = version::Empty->new(1.002_003);
isa_ok( $testobj, "version::Empty" );
ok( $testobj->numify == 1.002003, "Numified correctly" );
ok( $testobj->stringify eq "1.002003", "Stringified correctly" );
ok( $testobj->normal eq "v1.2.3", "Normalified correctly" );

my $verobj = __SUBCLASS__->new("1.2.4");
ok( $verobj > $testobj, "Comparison vs parent class" );
ok( $verobj gt $testobj, "Comparison vs parent class" );
BaseTests("version::Empty");

diag "tests with bad subclass" unless $ENV{PERL_CORE};
$testobj = version::Bad->new(1.002_003);
isa_ok( $testobj, "version::Bad" );
eval { my $string = $testobj->numify };
like($@, qr/Invalid version object/,
    "Bad subclass numify");
eval { my $string = $testobj->normal };
like($@, qr/Invalid version object/,
    "Bad subclass normal");
eval { my $string = $testobj->stringify };
like($@, qr/Invalid version object/,
    "Bad subclass stringify");
eval { my $test = $testobj > 1.0 };
like($@, qr/Invalid version object/,
    "Bad subclass vcmp");
